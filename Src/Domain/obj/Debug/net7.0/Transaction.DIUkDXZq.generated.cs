// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Domain
{
    [System.ComponentModel.TypeConverter(typeof(TransactionIdTypeConverter))]
    [System.Text.Json.Serialization.JsonConverter(typeof(TransactionIdSystemTextJsonConverter))]
    readonly partial struct TransactionId : System.IComparable<TransactionId>, System.IEquatable<TransactionId>
    {
        public System.Guid Value
        {
            get;
        }

        public TransactionId(System.Guid value)
        {
            Value = value;
        }

        public static TransactionId New() => new TransactionId(System.Guid.NewGuid());
        public static readonly TransactionId Empty = new TransactionId(System.Guid.Empty);
        public bool Equals(TransactionId other) => this.Value.Equals(other.Value);
        public int CompareTo(TransactionId other) => Value.CompareTo(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            return obj is TransactionId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();
        public override string ToString() => Value.ToString();
        public static bool operator ==(TransactionId a, TransactionId b) => a.CompareTo(b) == 0;
        public static bool operator !=(TransactionId a, TransactionId b) => !(a == b);
        class TransactionIdTypeConverter : System.ComponentModel.TypeConverter
        {
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
            {
                return sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);
            }

            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
                var stringValue = value as string;
                if (!string.IsNullOrEmpty(stringValue) && System.Guid.TryParse(stringValue, out var guid))
                {
                    return new TransactionId(guid);
                }

                return base.ConvertFrom(context, culture, value);
            }
        }

        public class TransactionIdSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<TransactionId>
        {
            public override TransactionId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                return new TransactionId(System.Guid.Parse(reader.GetString()));
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, TransactionId value, System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStringValue(value.Value);
            }
        }
    }
}